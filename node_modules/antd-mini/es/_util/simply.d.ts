type ComponentInstance<Props, Methods, Data, Mixins, InstanceMethods> = unknown;
declare function ComponentImpl<Props, Methods = unknown, Data = unknown, Mixins = unknown, InstanceMethods = unknown>(defaultProps: Props, methods?: Methods & ThisType<ComponentInstance<Props, Methods, Data, Mixins, InstanceMethods>>, data?: Data & any, mixins?: Mixins & any, instanceMethods?: InstanceMethods & any): void;
export interface IPlatformEvent {
    currentTarget: {
        dataset: Record<string, unknown>;
    };
    target: {
        dataset: Record<string, unknown>;
    };
}
export declare function triggerEvent(instance: any, eventName: string, value: unknown, e?: any): void;
export declare function triggerEventOnly(instance: any, eventName: string, e?: any): void;
export declare function triggerEventValues(instance: any, eventName: string, values: any[], e?: any): void;
export declare function triggerCatchEvent(instance: any, eventName: string, e?: any): void;
export declare function getValueFromProps(instance: any, propName?: string | string[]): any;
export { ComponentImpl as Component };
